openapi: 3.0.3
info:
  title: Todo API
  description: A comprehensive Todo management API
  version: 1.0.0
  contact:
    name: Todo API Team
    email: api@todoapp.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server

paths:
  /api/todos:
    get:
      summary: Get all todos
      description: Retrieve all todo items with optional filtering
      operationId: getAllTodos
      parameters:
        - name: completed
          in: query
          description: Filter by completion status
          required: false
          schema:
            type: boolean
        - name: priority
          in: query
          description: Filter by priority level
          required: false
          schema:
            $ref: "#/components/schemas/Priority"
      responses:
        "200":
          description: List of todos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TodoResponse"
    post:
      summary: Create new todo
      description: Create a new todo item
      operationId: createTodo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TodoCreate"
      responses:
        "201":
          description: Todo created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodoResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/todos/{id}:
    get:
      summary: Get todo by ID
      description: Retrieve a specific todo by its ID
      operationId: getTodoById
      parameters:
        - name: id
          in: path
          required: true
          description: Todo ID
          schema:
            type: string
            example: "507f1f77bcf86cd799439011"
      responses:
        "200":
          description: Todo found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodoResponse"
        "404":
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update todo
      description: Update an existing todo
      operationId: updateTodo
      parameters:
        - name: id
          in: path
          required: true
          description: Todo ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TodoUpdate"
      responses:
        "200":
          description: Todo updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodoResponse"
        "404":
          description: Todo not found
        "400":
          description: Invalid input
    delete:
      summary: Delete todo
      description: Delete a todo by ID
      operationId: deleteTodo
      parameters:
        - name: id
          in: path
          required: true
          description: Todo ID
          schema:
            type: string
      responses:
        "204":
          description: Todo deleted successfully
        "404":
          description: Todo not found

  /api/todos/{id}/complete:
    patch:
      summary: Mark todo as completed
      description: Mark a todo as completed
      operationId: completeTodo
      parameters:
        - name: id
          in: path
          required: true
          description: Todo ID
          schema:
            type: string
      responses:
        "200":
          description: Todo marked as completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodoResponse"
        "404":
          description: Todo not found

  /api/todos/overdue:
    get:
      summary: Get overdue todos
      description: Retrieve all overdue todos
      operationId: getOverdueTodos
      responses:
        "200":
          description: List of overdue todos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TodoResponse"

  /api/todos/search:
    get:
      summary: Search todos
      description: Search todos by title
      operationId: searchTodos
      parameters:
        - name: q
          in: query
          required: true
          description: Search term
          schema:
            type: string
            example: "shopping"
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TodoResponse"

  /api/todos/tag/{tag}:
    get:
      summary: Get todos by tag
      description: Retrieve todos by specific tag
      operationId: getTodosByTag
      parameters:
        - name: tag
          in: path
          required: true
          description: Tag name
          schema:
            type: string
            example: "work"
      responses:
        "200":
          description: Todos with specified tag
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TodoResponse"

components:
  schemas:
    TodoCreate:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: Todo title
          example: "Einkaufen gehen"
        description:
          type: string
          maxLength: 1000
          description: Detailed description
          example: "Milch, Brot und Eier kaufen"
        priority:
          $ref: "#/components/schemas/Priority"
        dueDate:
          type: string
          format: date-time
          description: Due date and time
          example: "2025-10-03T18:00:00"
        tags:
          type: array
          items:
            type: string
          description: Category tags
          example: ["shopping", "personal"]

    TodoUpdate:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: Todo title
        description:
          type: string
          maxLength: 1000
          description: Detailed description
        priority:
          $ref: "#/components/schemas/Priority"
        dueDate:
          type: string
          format: date-time
          description: Due date and time
        completed:
          type: boolean
          description: Completion status
        tags:
          type: array
          items:
            type: string
          description: Category tags

    TodoResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier
          example: "507f1f77bcf86cd799439011"
        title:
          type: string
          description: Todo title
          example: "Einkaufen gehen"
        description:
          type: string
          description: Todo description
          example: "Milch, Brot, Eier"
        completed:
          type: boolean
          description: Completion status
          example: false
        priority:
          $ref: "#/components/schemas/Priority"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2025-10-02T14:30:00"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2025-10-02T15:45:00"
        dueDate:
          type: string
          format: date-time
          description: Due date
          example: "2025-10-03T18:00:00"
        tags:
          type: array
          items:
            type: string
          description: Category tags
          example: ["shopping", "personal"]
        overdue:
          type: boolean
          description: Whether todo is overdue
          example: false
        daysUntilDue:
          type: integer
          format: int64
          description: Days until due date
          example: 3

    Priority:
      type: string
      enum: [LOW, MEDIUM, HIGH, URGENT]
      description: Priority level
      example: MEDIUM

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Todo not found"
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
          example: "2025-10-02T16:00:00"
        path:
          type: string
          description: Request path
          example: "/api/todos/123"
