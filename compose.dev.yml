services:
  # Database
  mongo:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    volumes:
      - mongo-data:/data/db
    networks:
      - cc-todo-network

  # Database Managemetn UI
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://mongo:27017/
      ME_CONFIG_BASICAUTH_ENABLED: true
      ME_CONFIG_BASICAUTH_USERNAME: mongoexpressuser
      ME_CONFIG_BASICAUTH_PASSWORD: mongoexpresspass
    depends_on:
      - mongo
    networks:
      - cc-todo-network

  # Backend with existing Dockerfile.native
  backend:
    build:
      context: ./todo-backend
      dockerfile: src/main/docker/Dockerfile.native
    ports:
      - "8080:8080"
    environment:
      # Container-Network MongoDB Connection
      QUARKUS_MONGODB_CONNECTION_STRING: mongodb://mongo:27017/todoapp?retryWrites=false
      QUARKUS_MONGODB_DATABASE: todoapp
      QUARKUS_HTTP_HOST: 0.0.0.0
      QUARKUS_HTTP_PORT: 8080
      QUARKUS_HTTP_CORS_ENABLED: true
      QUARKUS_HTTP_CORS_ORIGINS: http://localhost:8088,http://frontend:8088
    depends_on:
      - mongo
    networks:
      - cc-todo-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f http://localhost:8080/api/todos/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend with existing Dockerfile
  frontend:
    build:
      context: ./todo-frontend
      dockerfile: Dockerfile
    ports:
      - "8088:8088"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - cc-todo-network
    volumes:
      # Live-Reload for Development
      - ./todo-frontend/src:/app/src:rw
      - /app/node_modules # Anonymous volume f√ºr node_modules

networks:
  cc-todo-network:
    driver: bridge

volumes:
  mongo-data:
    driver: local
